// Appointment Integration - T√≠ch h·ª£p qu·∫£n l√Ω user trong trang appointment
class AppointmentIntegration {
    constructor() {
        this.userSessionManager = null;
        this.waitForUserSessionManager();
    }

    // ƒê·ª£i cho ƒë·∫øn khi userSessionManager s·∫µn s√†ng
    waitForUserSessionManager() {
        if (window.userSessionManager) {
            this.userSessionManager = window.userSessionManager;
            this.init();
        } else {
            setTimeout(() => this.waitForUserSessionManager(), 100);
        }
    }

    // Kh·ªüi t·∫°o
    init() {
        // Ki·ªÉm tra quy·ªÅn truy c·∫≠p tr∆∞·ªõc
        if (!this.checkAccess()) {
            return; // D·ª´ng n·∫øu kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
        }
        
        this.updateAppointmentUI();
        this.setupEventListeners();
        // ƒê·∫£m b·∫£o c·∫≠p nh·∫≠t l·∫°i menu user sau khi trang load ho√†n t·∫•t
        setTimeout(() => this.updateAppointmentUI(), 1000);
        setTimeout(() => this.updateAppointmentUI(), 2000);
    }

    // C·∫≠p nh·∫≠t giao di·ªán appointment d·ª±a tr√™n tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
    updateAppointmentUI() {
        if (!this.userSessionManager) return;

        const userDropdown = document.querySelector('.dropdown-user');
        if (!userDropdown) return;

        if (this.userSessionManager.isLoggedIn()) {
            const userInfo = this.userSessionManager.getUserInfo();
            
            // C·∫≠p nh·∫≠t dropdown menu
            userDropdown.innerHTML = `
                <li>
                    <div class="dropdown-item d-flex align-items-center">
                        <div class="avatar-40 rounded-circle bg-primary d-flex align-items-center justify-content-center me-3">
                            <i class="fas fa-user text-white"></i>
                        </div>
                        <div>
                            <h6 class="mb-0">${userInfo.fullName || userInfo.email}</h6>
                            <small class="text-muted">${userInfo.userType || 'User'}</small>
                        </div>
                    </div>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="./my-account.html">
                    <i class="fas fa-user-cog me-2"></i>T√†i kho·∫£n c·ªßa t√¥i
                </a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#" onclick="appointmentIntegration.logout()">
                    <i class="fas fa-sign-out-alt me-2"></i>ƒêƒÉng xu·∫•t
                </a></li>
            `;

            // Hi·ªÉn th·ªã th√¥ng tin user trong form ƒë·∫∑t l·ªãch n·∫øu c√≥
            this.populateAppointmentForm(userInfo);
        } else {
            // User ch∆∞a ƒëƒÉng nh·∫≠p
            userDropdown.innerHTML = `
                <li><a class="dropdown-item border-bottom" href="./login.html">ƒêƒÉng nh·∫≠p</a></li>
                <li><a class="dropdown-item" href="./registration.html">ƒêƒÉng k√Ω</a></li>
            `;

            // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
            this.showLoginRequiredMessage();
        }
    }

    // ƒêi·ªÅn th√¥ng tin user v√†o form ƒë·∫∑t l·ªãch
    populateAppointmentForm(userInfo) {
        console.log('üîÑ ƒêang ƒëi·ªÅn th√¥ng tin user v√†o form:', userInfo);
        
        // T√¨m c√°c tr∆∞·ªùng input trong form ƒë·∫∑t l·ªãch (tab ƒëƒÉng k√Ω cho b·∫£n th√¢n)
        const loginTab = document.querySelector('#login'); // Tab ƒëƒÉng k√Ω cho b·∫£n th√¢n
        if (!loginTab) {
            console.warn('‚ùå Kh√¥ng t√¨m th·∫•y tab ƒëƒÉng k√Ω cho b·∫£n th√¢n');
            return;
        }

        console.log('‚úÖ T√¨m th·∫•y tab #login, ƒëang t√¨m c√°c input theo placeholder...');

        // ‚úÖ T√¨m input theo placeholder ch√≠nh x√°c (kh√¥ng d√πng index)
        const fullNameInput = loginTab.querySelector('input[placeholder*="H·ªç v√† t√™n s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ database"]');
        const emailInput = loginTab.querySelector('input[placeholder*="Email s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ database"]');
        const cccdInput = loginTab.querySelector('input[placeholder*="CCCD s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ database"]');
        const phoneInput = loginTab.querySelector('input[placeholder*="S·ªë ƒëi·ªán tho·∫°i s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ database"]');
        const birthdateInput = loginTab.querySelector('.flatpickrdate');
        const genderInputs = loginTab.querySelectorAll('input[name="genderSelf"]');

        console.log('üîç T√¨m ƒë∆∞·ª£c c√°c input:');
        console.log('- H·ªç v√† t√™n:', fullNameInput ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('- Email:', emailInput ? 'C√≥' : 'Kh√¥ng c√≥'); 
        console.log('- CCCD:', cccdInput ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('- S·ªë ƒëi·ªán tho·∫°i:', phoneInput ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('- Ng√†y sinh:', birthdateInput ? 'C√≥' : 'Kh√¥ng c√≥');
        console.log('- Radio gi·ªõi t√≠nh:', genderInputs.length, 'button(s)');

        // Debug: In ra t·∫•t c·∫£ input ƒë·ªÉ ki·ªÉm tra
        const allInputs = loginTab.querySelectorAll('input');
        console.log('üîß DEBUG: T·∫•t c·∫£ input trong tab #login:');
        allInputs.forEach((input, index) => {
            console.log(`  [${index}] Type: ${input.type}, Placeholder: "${input.placeholder}", Name: "${input.name}", Class: "${input.className}", Value: "${input.value}"`);
        });

        // N·∫øu kh√¥ng t√¨m th·∫•y input theo placeholder, th·ª≠ t√¨m theo c√°ch kh√°c
        let finalFullNameInput = fullNameInput;
        let finalEmailInput = emailInput;
        let finalCccdInput = cccdInput;
        let finalPhoneInput = phoneInput;
        let finalBirthdateInput = birthdateInput;

        // Fallback: T√¨m theo text content c·ªßa label
        if (!finalFullNameInput) {
            const nameLabel = Array.from(loginTab.querySelectorAll('label')).find(label => 
                label.textContent.toLowerCase().includes('h·ªç v√† t√™n') || 
                label.textContent.toLowerCase().includes('h·ªç t√™n')
            );
            if (nameLabel) {
                const nameContainer = nameLabel.closest('.col-12, .col-sm-6, .form-group');
                if (nameContainer) {
                    finalFullNameInput = nameContainer.querySelector('input[type="text"]');
                    console.log('üîÑ Fallback: T√¨m th·∫•y input h·ªç t√™n qua label');
                }
            }
        }

        if (!finalEmailInput) {
            const emailLabel = Array.from(loginTab.querySelectorAll('label')).find(label => 
                label.textContent.toLowerCase().includes('email')
            );
            if (emailLabel) {
                const emailContainer = emailLabel.closest('.col-12, .col-sm-6, .form-group');
                if (emailContainer) {
                    finalEmailInput = emailContainer.querySelector('input[type="email"], input[type="text"]');
                    console.log('üîÑ Fallback: T√¨m th·∫•y input email qua label');
                }
            }
        }

        if (!finalCccdInput) {
            const cccdLabel = Array.from(loginTab.querySelectorAll('label')).find(label => 
                label.textContent.toLowerCase().includes('cccd') ||
                label.textContent.toLowerCase().includes('cƒÉn c∆∞·ªõc')
            );
            if (cccdLabel) {
                const cccdContainer = cccdLabel.closest('.col-12, .col-sm-6, .form-group');
                if (cccdContainer) {
                    finalCccdInput = cccdContainer.querySelector('input[type="text"]');
                    console.log('üîÑ Fallback: T√¨m th·∫•y input CCCD qua label');
                }
            }
        }

        if (!finalPhoneInput) {
            const phoneLabel = Array.from(loginTab.querySelectorAll('label')).find(label => 
                label.textContent.toLowerCase().includes('ƒëi·ªán tho·∫°i') ||
                label.textContent.toLowerCase().includes('phone')
            );
            if (phoneLabel) {
                const phoneContainer = phoneLabel.closest('.col-12, .col-sm-6, .form-group');
                if (phoneContainer) {
                    finalPhoneInput = phoneContainer.querySelector('input[type="tel"], input[type="text"]');
                    console.log('üîÑ Fallback: T√¨m th·∫•y input phone qua label');
                }
            }
        }

        if (!finalBirthdateInput) {
            const dobLabel = Array.from(loginTab.querySelectorAll('label')).find(label => 
                label.textContent.toLowerCase().includes('ng√†y sinh') ||
                label.textContent.toLowerCase().includes('ng√†y th√°ng nƒÉm sinh')
            );
            if (dobLabel) {
                const dobContainer = dobLabel.closest('.col-12, .col-sm-6, .form-group');
                if (dobContainer) {
                    finalBirthdateInput = dobContainer.querySelector('input[type="text"], input.flatpickrdate');
                    console.log('üîÑ Fallback: T√¨m th·∫•y input ng√†y sinh qua label');
                }
            }
        }

        console.log('üîç Input cu·ªëi c√πng ƒë∆∞·ª£c ch·ªçn:');
        console.log('- H·ªç v√† t√™n:', finalFullNameInput ? `"${finalFullNameInput.placeholder}"` : 'Kh√¥ng c√≥');
        console.log('- Email:', finalEmailInput ? `"${finalEmailInput.placeholder}"` : 'Kh√¥ng c√≥');
        console.log('- CCCD:', finalCccdInput ? `"${finalCccdInput.placeholder}"` : 'Kh√¥ng c√≥');
        console.log('- S·ªë ƒëi·ªán tho·∫°i:', finalPhoneInput ? `"${finalPhoneInput.placeholder}"` : 'Kh√¥ng c√≥');
        console.log('- Ng√†y sinh:', finalBirthdateInput ? `"${finalBirthdateInput.placeholder}"` : 'Kh√¥ng c√≥');

        // Ki·ªÉm tra xem c√≥ input n√†o b·ªã tr√πng kh√¥ng
        const inputElements = [finalFullNameInput, finalEmailInput, finalCccdInput, finalPhoneInput, finalBirthdateInput].filter(Boolean);
        const uniqueInputs = new Set(inputElements);
        if (inputElements.length !== uniqueInputs.size) {
            console.warn('‚ö†Ô∏è C·∫¢NH B√ÅO: C√≥ input b·ªã tr√πng l·∫∑p!');
            inputElements.forEach((input, index) => {
                const names = ['H·ªç t√™n', 'Email', 'CCCD', 'ƒêi·ªán tho·∫°i', 'Ng√†y sinh'];
                console.log(`  ${names[index]}: ${input ? input.placeholder || input.outerHTML.substring(0, 100) : 'null'}`);
            });
        }

        // Lo·∫°i b·ªè readonly tr∆∞·ªõc khi ƒëi·ªÅn d·ªØ li·ªáu
        [finalFullNameInput, finalEmailInput, finalCccdInput, finalPhoneInput, finalBirthdateInput].forEach(input => {
            if (input) {
                console.log(`üîì B·ªè readonly cho input: ${input.placeholder || 'unknown'}`);
                input.removeAttribute('readonly');
                input.removeAttribute('disabled');
            }
        });

        // Lo·∫°i b·ªè disabled cho radio buttons
        genderInputs.forEach(input => {
            input.removeAttribute('disabled');
        });

        // ƒêi·ªÅn h·ªç v√† t√™n
        if (finalFullNameInput && userInfo) {
            let fullName = '';
            
            // Th·ª≠ nhi·ªÅu c√°ch l·∫•y t√™n
            if (userInfo.firstName && userInfo.lastName) {
                fullName = `${userInfo.lastName} ${userInfo.firstName}`;
            } else if (userInfo.name) {
                fullName = userInfo.name;
            } else if (userInfo.fullName) {
                fullName = userInfo.fullName;
            }
            
            if (fullName) {
                console.log(`üìù ƒêi·ªÅn h·ªç v√† t√™n: "${fullName}"`);
                finalFullNameInput.value = fullName;
                finalFullNameInput.dispatchEvent(new Event('input', { bubbles: true }));
                console.log('‚úÖ ƒê√£ ƒëi·ªÅn h·ªç v√† t√™n:', fullName);
            } else {
                console.warn('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t√™n ƒë·ªÉ ƒëi·ªÅn');
            }
        }

        // ƒêi·ªÅn email
        if (finalEmailInput && userInfo.email) {
            console.log(`üìù ƒêi·ªÅn email: "${userInfo.email}"`);
            finalEmailInput.value = userInfo.email;
            finalEmailInput.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn email:', userInfo.email);
        }

        // ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i
        if (finalPhoneInput && userInfo.phone) {
            console.log(`üìù ƒêi·ªÅn s·ªë ƒëi·ªán tho·∫°i: "${userInfo.phone}"`);
            finalPhoneInput.value = userInfo.phone;
            finalPhoneInput.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn s·ªë ƒëi·ªán tho·∫°i:', userInfo.phone);
        }

        // ƒêi·ªÅn CCCD
        if (finalCccdInput && userInfo.cccd) {
            console.log(`üìù ƒêi·ªÅn CCCD: "${userInfo.cccd}"`);
            finalCccdInput.value = userInfo.cccd;
            finalCccdInput.dispatchEvent(new Event('input', { bubbles: true }));
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn CCCD:', userInfo.cccd);
        }

        // ƒêi·ªÅn gi·ªõi t√≠nh
        if (userInfo.gender && genderInputs.length > 0) {
            let genderValue = userInfo.gender.toLowerCase();
            // Chuy·ªÉn ƒë·ªïi t·ª´ API response sang HTML values
            if (genderValue === 'male' || genderValue === 'nam' || genderValue === '0') genderValue = 'male';
            else if (genderValue === 'female' || genderValue === 'n·ªØ' || genderValue === '1') genderValue = 'female';
            else genderValue = 'other';

            console.log(`üìù T√¨m radio gi·ªõi t√≠nh v·ªõi value: "${genderValue}"`);
            const genderRadio = loginTab.querySelector(`input[name="genderSelf"][value="${genderValue}"]`);
            if (genderRadio) {
                genderRadio.checked = true;
                genderRadio.dispatchEvent(new Event('change', { bubbles: true }));
                console.log('‚úÖ ƒê√£ ch·ªçn gi·ªõi t√≠nh:', genderValue);
            } else {
                console.warn('‚ùå Kh√¥ng t√¨m th·∫•y radio button cho gi·ªõi t√≠nh:', genderValue);
                console.log('üîç Available gender options:', Array.from(genderInputs).map(r => r.value));
            }
        }

        // ƒêi·ªÅn ng√†y sinh
        const birthdate = userInfo.dob || userInfo.birthdate || userInfo.dateOfBirth || userInfo.birth_date;
        console.log('üîç Debug ng√†y sinh - userInfo:', userInfo);
        console.log('üîç Debug ng√†y sinh - birthdateInput:', finalBirthdateInput);
        console.log('üîç Debug ng√†y sinh - birthdate:', birthdate);
        
        if (finalBirthdateInput && birthdate) {
            let formatted = birthdate;
            // N·∫øu l√† yyyy-mm-dd th√¨ chuy·ªÉn sang dd/mm/yyyy
            if (/^\d{4}-\d{2}-\d{2}/.test(formatted)) {
                const date = new Date(formatted);
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const year = date.getFullYear();
                formatted = `${day}/${month}/${year}`;
            }
            
            console.log(`üìù ƒêi·ªÅn ng√†y sinh: "${formatted}"`);
            finalBirthdateInput.value = formatted;
            finalBirthdateInput.dispatchEvent(new Event('input', { bubbles: true }));
            
            // N·∫øu c√≥ flatpickr th√¨ d√πng API c·ªßa n√≥
            if (finalBirthdateInput._flatpickr) {
                finalBirthdateInput._flatpickr.setDate(formatted, true, 'd/m/Y');
                console.log('‚úÖ ƒê√£ set ng√†y qua flatpickr:', formatted);
            } else {
                // N·∫øu ch∆∞a c√≥ flatpickr, ƒë·ª£i v√† th·ª≠ l·∫°i
                setTimeout(() => {
                    if (finalBirthdateInput._flatpickr) {
                        finalBirthdateInput._flatpickr.setDate(formatted, true, 'd/m/Y');
                        console.log('‚úÖ ƒê√£ set ng√†y qua flatpickr (delayed):', formatted);
                    }
                }, 500);
                console.log('‚úÖ ƒê√£ set ng√†y tr·ª±c ti·∫øp:', formatted);
            }
            
            console.log('‚úÖ ƒê√£ ƒëi·ªÅn ng√†y sinh:', formatted);
        } else {
            console.warn('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ng√†y sinh ho·∫∑c kh√¥ng t√¨m th·∫•y input ng√†y sinh');
        }

        console.log('‚úÖ Ho√†n th√†nh ƒëi·ªÅn th√¥ng tin user v√†o form');
        
        // Trigger validation ƒë·ªÉ enable n√∫t Ti·∫øp Theo
        setTimeout(() => {
            // Trigger validation events cho t·∫•t c·∫£ input
            [finalFullNameInput, finalEmailInput, finalCccdInput, finalPhoneInput, finalBirthdateInput].forEach(input => {
                if (input && input.value) {
                    input.dispatchEvent(new Event('blur', { bubbles: true }));
                    input.dispatchEvent(new Event('keyup', { bubbles: true }));
                    input.dispatchEvent(new Event('change', { bubbles: true }));
                    input.dispatchEvent(new Event('input', { bubbles: true }));
                    console.log(`üîÑ Triggered validation cho: ${input.placeholder || 'unknown'}`);
                }
            });

            // Trigger validation cho radio buttons
            genderInputs.forEach(input => {
                if (input.checked) {
                    input.dispatchEvent(new Event('change', { bubbles: true }));
                    console.log(`üîÑ Triggered validation cho gender: ${input.value}`);
                }
            });

            // Ki·ªÉm tra v√† enable n√∫t Ti·∫øp Theo CH·ªà CHO TAB ƒêƒÇNG K√ù B·∫¢N TH√ÇN
            const selfNextButton = document.getElementById('next-btn-self');
            if (selfNextButton) {
                selfNextButton.disabled = false;
                selfNextButton.classList.remove('disabled', 'btn-disabled');
                selfNextButton.classList.add('btn-enabled');
                selfNextButton.style.opacity = '1';
                selfNextButton.style.cursor = 'pointer';
                selfNextButton.style.pointerEvents = 'auto';
                selfNextButton.title = 'Ti·∫øp t·ª•c';
                console.log('‚úÖ ƒê√£ enable n√∫t Ti·∫øp Theo cho tab "ƒêƒÉng k√Ω cho b·∫£n th√¢n"');
            } else {
                console.warn('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Ti·∫øp Theo cho tab "ƒêƒÉng k√Ω cho b·∫£n th√¢n" (id="next-btn-self")');
            }

            // KH√îNG TOUCH N√öT C·ª¶A TAB NG∆Ø·ªúI TH√ÇN (id="next-btn-relatives")
            console.log('‚ÑπÔ∏è Kh√¥ng thay ƒë·ªïi n√∫t Ti·∫øp Theo c·ªßa tab "ƒêƒÉng k√Ω cho ng∆∞·ªùi th√¢n"');

            // T√¨m n√∫t theo text content (fallback - CH·ªà TRONG TAB ƒêƒÇNG K√ù B·∫¢N TH√ÇN)
            const loginTab = document.querySelector('#login');
            if (loginTab) {
                const loginTabButtons = loginTab.querySelectorAll('button');
                loginTabButtons.forEach(btn => {
                    const text = btn.textContent.trim().toLowerCase();
                    if ((text.includes('ti·∫øp') || text.includes('next')) && btn.disabled) {
                        btn.disabled = false;
                        btn.classList.remove('disabled', 'btn-disabled');
                        btn.classList.add('btn-enabled');
                        btn.style.opacity = '1';
                        btn.style.cursor = 'pointer';
                        btn.style.pointerEvents = 'auto';
                        console.log('‚úÖ ƒê√£ enable n√∫t Ti·∫øp Theo (fallback) trong tab ƒëƒÉng k√Ω b·∫£n th√¢n:', btn.textContent);
                    }
                });
            }

            // Ki·ªÉm tra form validation function n·∫øu c√≥
            if (typeof window.checkAndUpdate === 'function') {
                window.checkAndUpdate();
                console.log('üîÑ ƒê√£ g·ªçi checkAndUpdate validation');
            }

            // Ki·ªÉm tra validation custom
            const forms = document.querySelectorAll('form');
            forms.forEach(form => {
                if (form.checkValidity && typeof form.checkValidity === 'function') {
                    const isValid = form.checkValidity();
                    console.log(`üìã Form validation result: ${isValid}`);
                }
            });

            console.log('‚úÖ ƒê√£ trigger validation v√† enable buttons');

            // SAU KHI VALIDATION - Set readonly ƒë·ªÉ kh√≥a form
            setTimeout(() => {
                [finalFullNameInput, finalEmailInput, finalCccdInput, finalPhoneInput, finalBirthdateInput].forEach(input => {
                    if (input) {
                        input.setAttribute('readonly', 'readonly');
                        input.style.backgroundColor = '#f8f9fa';
                        input.style.cursor = 'not-allowed';
                        input.title = 'Th√¥ng tin ƒë∆∞·ª£c l·∫•y t·ª´ t√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p';
                        console.log(`üîí ƒê√£ kh√≥a input: ${input.placeholder || 'unknown'}`);
                        
                        // ƒê·∫∑c bi·ªát cho flatpickr input (ng√†y sinh)
                        if (input.classList.contains('flatpickrdate') || input === finalBirthdateInput) {
                            // V√¥ hi·ªáu h√≥a flatpickr
                            if (input._flatpickr) {
                                input._flatpickr.set('clickOpens', false);
                                input._flatpickr.set('allowInput', false);
                                console.log(`üîí ƒê√£ v√¥ hi·ªáu h√≥a flatpickr cho ng√†y sinh`);
                            }
                            
                            // Th√™m event listener ƒë·ªÉ ngƒÉn click
                            input.addEventListener('click', function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                return false;
                            });
                            
                            input.addEventListener('focus', function(e) {
                                e.preventDefault();
                                input.blur();
                                return false;
                            });
                            
                            console.log(`üîí ƒê√£ th√™m event block cho input ng√†y sinh`);
                        }
                    }
                });

                // Kh√≥a radio buttons gi·ªõi t√≠nh
                genderInputs.forEach(input => {
                    input.setAttribute('disabled', 'disabled');
                    input.style.cursor = 'not-allowed';
                    // Th√™m style cho label
                    const label = document.querySelector(`label[for="${input.id}"]`);
                    if (label) {
                        label.style.cursor = 'not-allowed';
                        label.style.opacity = '0.7';
                        label.title = 'Th√¥ng tin ƒë∆∞·ª£c l·∫•y t·ª´ t√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p';
                    }
                });
                
                console.log('üîí ƒê√£ kh√≥a form "ƒêƒÉng k√Ω cho b·∫£n th√¢n" - th√¥ng tin ƒë∆∞·ª£c l·∫•y t·ª´ t√†i kho·∫£n ƒë√£ ƒëƒÉng nh·∫≠p');
            }, 100);

        }, 200);

        console.log('‚ÑπÔ∏è Form s·∫Ω ƒë∆∞·ª£c kh√≥a sau khi validation ƒë·ªÉ b·∫£o v·ªá th√¥ng tin t√†i kho·∫£n');
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    showLoginRequiredMessage() {
        // T√¨m container ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
        const appointmentForm = document.querySelector('.appointment-tab-form');
        if (appointmentForm) {
            // Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng b√°o ch∆∞a
            let loginMessage = document.getElementById('login-required-message');
            if (!loginMessage) {
                loginMessage = document.createElement('div');
                loginMessage.id = 'login-required-message';
                loginMessage.className = 'alert alert-info text-center mb-4';
                loginMessage.innerHTML = `
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t l·ªãch h·∫πn</strong>
                    <br>
                    <a href="./login.html" class="btn btn-primary btn-sm mt-2">ƒêƒÉng nh·∫≠p ngay</a>
                `;
                
                // Ch√®n th√¥ng b√°o v√†o ƒë·∫ßu form
                appointmentForm.insertBefore(loginMessage, appointmentForm.firstChild);
            }
        }
    }

    // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
    logout() {
        if (this.userSessionManager) {
            this.userSessionManager.logout();
        }
    }

    // Thi·∫øt l·∫≠p c√°c event listeners
    setupEventListeners() {
        // L·∫Øng nghe s·ª± ki·ªán thay ƒë·ªïi tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
        window.addEventListener('storage', (e) => {
            if (e.key === 'kivicare_user_session') {
                setTimeout(() => {
                    this.updateAppointmentUI();
                }, 100);
            }
        });

        // L·∫Øng nghe s·ª± ki·ªán click v√†o n√∫t ƒë·∫∑t l·ªãch
        const appointmentButtons = document.querySelectorAll('button[type="submit"], .appointment-submit');
        appointmentButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                if (!this.userSessionManager || !this.userSessionManager.isLoggedIn()) {
                    e.preventDefault();
                    window.location.href = './login.html';
                }
            });
        });
    }

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p trang appointment
    checkAccess() {
        if (!this.userSessionManager || !this.userSessionManager.isLoggedIn()) {
            // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
            window.location.href = './login.html';
            return false;
        }
        return true;
    }
}

// H√†m t·ª± ƒë·ªông l·∫•y th√¥ng tin user v√† ƒëi·ªÅn v√†o form khi ƒëƒÉng nh·∫≠p
async function fetchAndFillUserInfo() {
  console.log('üîç === DEBUG TOKEN ===');
  
  // Ki·ªÉm tra t·∫•t c·∫£ c√°c key c√≥ th·ªÉ c√≥
  const token1 = localStorage.getItem('kivicare_token');
  const token2 = sessionStorage.getItem('kivicare_token');
  const token3 = localStorage.getItem('token');
  const token4 = sessionStorage.getItem('token');
  
  console.log('üîç localStorage.kivicare_token:', token1);
  console.log('üîç sessionStorage.kivicare_token:', token2);
  console.log('üîç localStorage.token:', token3);
  console.log('üîç sessionStorage.token:', token4);
  
  // Ki·ªÉm tra UserSessionManager
  let tokenFromSession = null;
  if (window.userSessionManager && window.userSessionManager.isLoggedIn()) {
    const userInfo = window.userSessionManager.getUserInfo();
    tokenFromSession = userInfo ? userInfo.token : null;
    console.log('üîç Token t·ª´ UserSessionManager:', tokenFromSession);
  }
  
  // Ki·ªÉm tra kivicare_user_session
  const userSession = localStorage.getItem('kivicare_user_session');
  console.log('üîç kivicare_user_session:', userSession);
  if (userSession) {
    try {
      const parsed = JSON.parse(userSession);
      console.log('üîç Token trong user session:', parsed.token);
    } catch (e) {
      console.error('‚ùå L·ªói parse user session:', e);
    }
  }
  
  // Ch·ªçn token t·ªët nh·∫•t
  const token = token1 || token2 || token3 || token4 || tokenFromSession;
  console.log('üîç Token cu·ªëi c√πng ƒë∆∞·ª£c ch·ªçn:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token');
  console.log('üîç === END DEBUG ===');
  
  if (!token) {
    console.warn('‚ùå Kh√¥ng t√¨m th·∫•y token n√†o. C√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c token b·ªã x√≥a.');
    return;
  }
  
  try {
    console.log('üì° ƒêang g·ªçi API l·∫•y th√¥ng tin user...');
    const response = await fetch('https://localhost:7097/api/appointment/user-info', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    console.log('üì© Response status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('üì© Response data:', data);
      
      if (data && data.data) {
        // ‚úÖ D·ªØ li·ªáu user n·∫±m trong data.data (theo response th·ª±c t·∫ø)
        console.log('‚úÖ C√≥ d·ªØ li·ªáu user, ƒëang ƒëi·ªÅn v√†o form...');
        
        // T·∫°o instance AppointmentIntegration n·∫øu ch∆∞a c√≥
        if (!window.appointmentIntegration) {
          console.log('üîÑ T·∫°o AppointmentIntegration instance m·ªõi...');
          window.appointmentIntegration = new AppointmentIntegration();
        }
        
        window.appointmentIntegration.populateAppointmentForm(data.data);
      } else {
        // ‚ö†Ô∏è N·∫øu kh√¥ng c√≥ data.data th√¨ c·∫£nh b√°o  
        console.warn('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu user trong response');
        console.log('üîç Debug - data:', data);
        console.log('üîç Debug - data.data:', data ? data.data : 'undefined');
      }
    } else {
      console.error('‚ùå API tr·∫£ v·ªÅ l·ªói:', response.status, await response.text());
    }
  } catch (e) {
    console.error('‚ùå L·ªói g·ªçi API:', e);
    }
}

// Kh·ªüi t·∫°o AppointmentIntegration khi trang load
let appointmentIntegration;
document.addEventListener('DOMContentLoaded', function() {
    appointmentIntegration = new AppointmentIntegration();

    // Kh·ªüi t·∫°o flatpickr cho input ng√†y kh√°m
    const appointmentDateInputs = document.querySelectorAll('.flatpickrdate-appointment');
    if (typeof flatpickr !== typeof undefined) {
        Array.from(appointmentDateInputs).forEach(input => {
            flatpickr(input, {
                dateFormat: 'd/m/Y',
                locale: 'vn',
                minDate: 'today',
                allowInput: true,
                onChange: function() {
                    if (window.appointmentConfirmation) {
                        window.appointmentConfirmation.updateConfirmationDisplay();
                    }
                }
            });
            input.addEventListener('change', function() {
                if (window.appointmentConfirmation) {
                    window.appointmentConfirmation.updateConfirmationDisplay();
                }
            });
        });
    }

    // Kh·ªüi t·∫°o flatpickr cho input ng√†y sinh
    const birthdateInputs = document.querySelectorAll('.flatpickrdate-patient');
    if (typeof flatpickr !== typeof undefined) {
        Array.from(birthdateInputs).forEach(input => {
            flatpickr(input, {
                dateFormat: 'd/m/Y',
                locale: 'vn',
                minDate: '1900-01-01',
                maxDate: new Date(),
                allowInput: true,
                onChange: function() {
                    if (window.appointmentConfirmation) {
                        window.appointmentConfirmation.updateConfirmationDisplay();
                    }
                }
            });
            input.addEventListener('change', function() {
                if (window.appointmentConfirmation) {
                    window.appointmentConfirmation.updateConfirmationDisplay();
                }
            });
        });
    }
    
    fetchAndFillUserInfo();
    
    // L·∫Øng nghe s·ª± ki·ªán chuy·ªÉn tab ƒë·ªÉ ƒëi·ªÅn th√¥ng tin khi v√†o tab ƒëƒÉng k√Ω cho b·∫£n th√¢n
    document.addEventListener('shown.bs.tab', function(event) {
        if (event.target.getAttribute('data-bs-target') === '#login') {
            console.log('üîÑ ƒê√£ chuy·ªÉn sang tab ƒëƒÉng k√Ω cho b·∫£n th√¢n, ƒëang ƒëi·ªÅn th√¥ng tin...');
            setTimeout(() => fetchAndFillUserInfo(), 200);
        }
    });
});

// Export ƒë·ªÉ s·ª≠ d·ª•ng trong c√°c file kh√°c
window.appointmentIntegration = appointmentIntegration; 